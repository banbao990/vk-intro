
#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : require

#include "shared_with_shaders.h"
#define DTREE_MAX_NODE_BIT 9

struct STree {
    ivec4 _child_index; // padding 2
};

struct DTree {
    ivec4 _child_index;
    vec4 _flux; // padding 3
};

layout(set = SWS_ENVS_SET, binding = 0) uniform sampler2D EnvTexture;

layout(set = SWS_SCENE_AS_SET,          binding = SWS_SCENE_AS_BINDING)                 uniform accelerationStructureEXT Scene;
layout(set = SWS_RESULT_IMAGE_SET,      binding = SWS_RESULT_IMAGE_BINDING, rgba8)      uniform image2D ResultImage;
layout(set = SWS_ACCUMULATED_IMAGE_SET, binding = SWS_ACCUMULATED_IMAGE_BINDING, rgba8) uniform image2D AccumulatedImage;

// storage buffer
layout(std140, set = SWS_RADIANCE_CACHE_SET, binding = SWS_RADIANCE_CACHE_BINDING) buffer RadianceCacheBuffer {
    RecordPerPixel data[];
} RCBuffer;

layout(std140, set = SWS_STREE_SET, binding = SWS_STREE_BINDING) buffer readonly STreeBuffer {
    STree data[];
} sample_stree;

layout(std140, set = SWS_DTREE_SET, binding = SWS_DTREE_BINDING) buffer readonly DTreeBuffer {
    DTree data[];
} sample_dtree;

layout(set = SWS_CAMDATA_SET,       binding = SWS_CAMDATA_BINDING, std140)     uniform AppData {
    UniformParams Params;
};

layout(location = SWS_LOC_PRIMARY_RAY) rayPayloadEXT RayPayload PrimaryRay;
layout(location = SWS_LOC_SHADOW_RAY)  rayPayloadEXT ShadowRayPayload ShadowRay;

const float kBunnyRefractionIndex = 1.0f / 1.31f; // ice

vec3 CalcRayDir(vec2 screenUV, float aspect) {
    vec3 u = Params.camSide.xyz;
    vec3 v = Params.camUp.xyz;

    const float planeWidth = tan(Params.camNearFarFov.z * 0.5f);

    u *= (planeWidth * aspect);
    v *= planeWidth;

    const vec3 rayDir = normalize(Params.camDir.xyz + (u * screenUV.x) - (v * screenUV.y));
    return rayDir;
}

const float MY_PI = 3.1415926535897932384626433832795;
const float MY_INV_PI = 1.0 / MY_PI;

vec2 DirToLatLong(vec3 dir) {
    float phi = atan(dir.x, dir.z);
    float theta = acos(dir.y);

    return vec2((MY_PI + phi) * (0.5 / MY_PI), theta * MY_INV_PI);
}

// randam sampler start
uint InitRandomSeed(uint val0, uint val1) {
    uint v0 = val0, v1 = val1, s0 = 0;

    for (uint n = 0; n < 16; n++) {
        s0 += 0x9e3779b9;
        v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
        v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
    }
    return v0;
}

uint RandomInt(inout uint seed) {
    // LCG values from Numerical Recipes
    return (seed = 1664525 * seed + 1013904223);
}

float RandomFloat(inout uint seed) {
    //// Float version using bitmask from Numerical Recipes
    //const uint one = 0x3f800000;
    //const uint msk = 0x007fffff;
    //return uintBitsToFloat(one | (msk & (RandomInt(seed) >> 9))) - 1;

    // Faster version from NVIDIA examples; quality good enough for our use case.
    return (float(RandomInt(seed) & 0x00FFFFFF) / float(0x01000000));
}

vec3 random_cosine_direction(inout uint wseed) {
    float r1 = RandomFloat(wseed);
    float r2 = RandomFloat(wseed);
    float z = sqrt(1 - r2);

    float phi = MY_PI * 2 * r1;
    float x = cos(phi) * sqrt(r2);
    float y = sin(phi) * sqrt(r2);
    return vec3(x, y, z);
}

// random sampler end

// from ppg
// x,y,z => theta, z => [0, 1]
vec2 xyz2thetaphi(in vec3 xyz) {
    xyz = normalize(xyz);
    float cos_theta = clamp(xyz.z, -1.0f, 1.0f);
    float phi = atan(xyz.y, xyz.x);
    if(phi < 0) { phi += BB_PI2; }
    return vec2((cos_theta + 1.0f) / 2.0f, phi / BB_PI2);
}

vec3 thetaphi2xyz(in vec2 tp) {
    float cos_theta = 2.0f * tp.x - 1.0f;
    float phi = tp.y * BB_PI2;
    float sin_theta = sqrt(1 -  cos_theta * cos_theta);

    vec2 sc_phi = vec2(sin(phi), cos(phi));
    return vec3(sin_theta * sc_phi.y, sin_theta * sc_phi.x, cos_theta);
}

int get_dtree_index(in vec3 position) {
    int index = 0;
    int depth = 0;
    STree now = sample_stree.data[index];
    // have child, recursive
    while (now._child_index[0] != -1) {
        int sub_time = (depth / 3);
        int p_index = depth % 3;
        int c_idx_idx = 1;
        if (position[p_index] < 1.0f / (2 << sub_time)) {
            c_idx_idx = 0;
        }
        index = now._child_index[c_idx_idx];
        now = sample_stree.data[index];
        ++depth;
    }
    return index;
}

void sample_direction(inout vec3 direction, inout uint wseed, in int index, out float pdf) {
    index = (index << DTREE_MAX_NODE_BIT);

    DTree now = sample_dtree.data[index];
    pdf = 1.0f;
    vec4 interval = vec4(0.0f, 1.0f, 0.0f, 1.0f);
    float pdf_rate = 1.0f;

    while (now._child_index[0] != -1) {
        float total_flux = 0;
        for(int i = 0; i < 4; ++i) {
            total_flux += sample_dtree.data[now._child_index[i]]._flux[0];
        }

        float prob = RandomFloat(wseed) * total_flux;
        int idx = 0;
        for (idx = 0; idx < 3; ++idx) {
            prob -= sample_dtree.data[now._child_index[idx]]._flux[0];
            if (prob < 0) {
                break;
            }
        }
 
        float t1 = interval[0];
        float t2 = interval[1];
        float p1 = interval[2];
        float p2 = interval[3];
        float tm = (t1 + t2) / 2;
        float pm = (p1 + p2) / 2;

        //  t1 < t2, p1 < p2
        //  0: (t1, p1)
        //  1: (t1, p2)
        //  2: (t2, p1)
        //  3: (t2, p2)
        interval[0] = ((idx >> 1) == 0) ? t1 : tm;
        interval[1] = ((idx >> 1) == 0) ? tm : t2;
        interval[2] = ((idx & 1) == 0) ? p1 : pm;
        interval[3] = ((idx & 1) == 0) ? pm : p2;

        pdf_rate *= 4.0f;
        index = now._child_index[idx];

        pdf *= sample_dtree.data[index]._flux[0] / total_flux;
        now = sample_dtree.data[index];
    }

    pdf *= pdf_rate / (4 * BB_PI);

    vec2 dir;
    dir[0] = (RandomFloat(wseed) * (interval[1] - interval[0]) + interval[0]);
    dir[1] = (RandomFloat(wseed) * (interval[3] - interval[2]) + interval[2]);
    direction = thetaphi2xyz(dir);
}

void eval_direction(in vec3 direction, in int index, out float pdf) {
    // xyz2thetaphi(direction) will normalize the direction
    vec2 tp = xyz2thetaphi(direction);

    index = (index << DTREE_MAX_NODE_BIT);

    DTree now = sample_dtree.data[index];
    pdf = 1.0f;

    vec4 interval = vec4(0.0f, 1.0f, 0.0f, 1.0f);
    float pdf_rate = 1.0f;

    while (now._child_index[0] != -1) {
        float total_flux = 0;
        for(int i = 0; i < 4; ++i) {
            total_flux += sample_dtree.data[now._child_index[i]]._flux[0];
        }

        float t1 = interval[0];
        float t2 = interval[1];
        float p1 = interval[2];
        float p2 = interval[3];
        float tm = (t1 + t2) / 2;
        float pm = (p1 + p2) / 2;

        int idx = ((tp[1] < pm) ? 0 : 1) + 2 * ((tp[0] < tm) ? 0 : 1);

        //  t1 < t2, p1 < p2
        //  0: (t1, p1)
        //  1: (t1, p2)
        //  2: (t2, p1)
        //  3: (t2, p2)
        interval[0] = ((idx >> 1) == 0) ? t1 : tm;
        interval[1] = ((idx >> 1) == 0) ? tm : t2;
        interval[2] = ((idx & 1) == 0) ? p1 : pm;
        interval[3] = ((idx & 1) == 0) ? pm : p2;

        index = now._child_index[idx];
        pdf *= sample_dtree.data[index]._flux[0] / total_flux;
        pdf_rate *= 4.0f;
        now = sample_dtree.data[index];
    }

    pdf *= pdf_rate / (4 * BB_PI);
}

void sample_lambertian(inout uint wseed, in vec3 normal, out vec3 direction, out float pdf) {
    const vec3 localDirection = random_cosine_direction(wseed);
    pdf = dot(localDirection, vec3(0.0f, 0.0f, 1.0f)) / MY_PI;

    // dirty implement
    mat3 local2world;
    const vec3 a = (abs(normal[0]) > 0.9f) ? vec3(0.0f, 1.0f, 0.0f) : vec3(1.0f, 0.0f, 0.0f);
    local2world[2] = normal;
    local2world[1] = normalize(cross(normal, a));
    local2world[0] = cross(normal, local2world[1]); // left hand
    // dirty implment

    direction = local2world * localDirection;
}

void eval_lambertian(in vec3 normal, in vec3 direction, out float pdf) {
    direction = normalize(direction);
    pdf = dot(normal, direction) / MY_PI;
}

void main() {
    const vec2 curPixel = vec2(gl_LaunchIDEXT.xy);
    const vec2 bottomRight = vec2(gl_LaunchSizeEXT.xy - 1);

    const vec2 uv = (curPixel / bottomRight) * 2.0f - 1.0f;

    const float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);

    const uint rayFlags = gl_RayFlagsOpaqueEXT;
    const uint shadowRayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;
    const uint cullMask = 0xFF;
    const uint stbRecordStride = 1;

    const float tmin = 0.0f;
    const float tmax = Params.camNearFarFov.y;

    vec3 finalColor = vec3(0.0f, 0.0f, 0.0f);

    uint wseed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), Params.accumulate_spp);

    uint rc_index = gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y;

    //for(uint spp_index = 0; spp_index < RECORD_NUM; ++spp_index) {
    vec3 origin = Params.camPos.xyz;
    vec3 direction = CalcRayDir(uv, aspect);
    vec3 throughput = vec3(1.0f, 1.0f, 1.0f);
    float throughout_pdf = 1.0f;

    vec3 throughput_iter[SWS_MAX_RECURSION];
    float throughout_pdf_iter[SWS_MAX_RECURSION];
    vec3 position_iter[SWS_MAX_RECURSION];
    vec2 direction_iter[SWS_MAX_RECURSION];

    // guard
    RCBuffer.data[rc_index].num = 0;

    for (int i = 0; i < SWS_MAX_RECURSION; ++i) {
        throughput_iter[i] = vec3(1.0f, 1.0f, 1.0f);
        throughout_pdf_iter[i] = 1.0f;

        traceRayEXT(Scene,
            rayFlags,
            cullMask,
            SWS_PRIMARY_HIT_SHADERS_IDX,
            stbRecordStride,
            SWS_PRIMARY_MISS_SHADERS_IDX,
            origin,
            tmin,
            direction,
            tmax,
            SWS_LOC_PRIMARY_RAY);

        const vec3 hitColor = PrimaryRay.colorAndDist.rgb;
        const float hitDistance = PrimaryRay.colorAndDist.w;

        // if hit background - quit
        if (hitDistance < 0.0f) {
            finalColor += throughput * hitColor;
            break;
        } else {
            const vec3 hitNormal = PrimaryRay.normalAndObjId.xyz;
            const float objectId = PrimaryRay.normalAndObjId.w;

            const vec3 hitPos = origin + direction * hitDistance;

            if (objectId == Params.mirror_id) {
                origin = hitPos + hitNormal * 0.001f;
                direction = reflect(direction, hitNormal);
            } else if (objectId == Params.glass_id) {
                const float NdotD = dot(hitNormal, direction);
                vec3 refrNormal = hitNormal;
                float refrEta;
                if (NdotD > 0.0f) {
                    refrNormal = -hitNormal;
                    refrEta = 1.0f / kBunnyRefractionIndex;
                } else {
                    refrNormal = hitNormal;
                    refrEta = kBunnyRefractionIndex;
                }

                origin = hitPos + direction * 0.001f;
                direction = refract(direction, refrNormal, refrEta);
                // full reflection
                // if(dot(direction,direction)==0){break;}
           //   } else if (objectId == OBJECT_ID_LIGHT) {
            } else if (objectId == Params.light_id) {
                // hit light
                vec3 fixed_light_color = vec3(30.0f);
                // finalColor += clamp(fixed_light_color * throughput / throughout_pdf, 0.0f, 1000.0f);
                // finalColor += fixed_light_color * throughput_iter[0] / throughout_pdf_iter[0];
                finalColor += fixed_light_color * throughput / throughout_pdf;
                // finalColor += hitColor * throughput / throughout_pdf;

                if (Params.ppg_train_on == 1) {
                    RCBuffer.data[rc_index].num = min(i, RECORD_NUM);
                    for (int j = 0; j < i && j < RECORD_NUM; ++j) {
                        vec3 li = (fixed_light_color * throughput_iter[j] / throughout_pdf_iter[j]);
                        RCBuffer.data[rc_index].record[j].p = vec4(position_iter[j], (li.x+li.y+li.z)/3.0f);
                        RCBuffer.data[rc_index].record[j].d = vec4(direction_iter[j], 0.0f, 0.0f);
                    }
                }
                break;
            } else {
                // we hit diffuse primitive - simple lambertian
                float pdf;

                if (Params.ppg_test_on == 1) {
                    int dindex = get_dtree_index(hitPos);
#if 0 // only SDTree
                    sample_direction(direction, wseed, dindex, pdf);
                    if (dot(hitNormal, direction) < 0.0) {
                        // stop if no contribution
                        break;
                    }
#else // MIS
                    if (sample_dtree.data[(dindex << DTREE_MAX_NODE_BIT)]._flux[0] <= 1e-6) {
                        // only BRDF
                        sample_lambertian(wseed, hitNormal, direction, pdf);
                    } else {
                        float pdf1, pdf2;
                        if (RandomFloat(wseed) < 0.5f) {
                          sample_direction(direction, wseed, dindex, pdf1);
                          if (dot(hitNormal, direction) < 0.0) {
                              // stop if no contribution
                              break;
                            } else {
                               eval_lambertian(hitNormal, direction, pdf2);
                          }
                        } else {
                            // only BRDF
                            sample_lambertian(wseed, hitNormal, direction, pdf2);
                            eval_direction(direction, dindex, pdf1);
                        }
                        pdf = 0.5 * (pdf1 + pdf2);
                    }
#endif
                } else {
                    // only BRDF
                    sample_lambertian(wseed, hitNormal, direction, pdf);
                }

                float bsdf_val;
                eval_lambertian(hitNormal, direction, bsdf_val);

                origin = hitPos + hitNormal * 0.001f;
                throughput *= bsdf_val * hitColor;
                throughout_pdf *= pdf;

                if (Params.ppg_train_on == 1) {
                    position_iter[i] = hitPos;
                    direction_iter[i] = xyz2thetaphi(direction);
                    for (int j = 0; j <= i; ++j) {
                        throughput_iter[j] *= bsdf_val * hitColor;
                        throughout_pdf_iter[j] *= pdf;
                    }
                }
            }
        }
    }

    //}
    // float c = 0.0f;
    // for(int i= 0;i <64;++i) {
    //     c= rand_whash(wseed);
    // }
    // finalColor = vec3(c);

    // finalColor = textureLod(EnvTexture, DirToLatLong(direction), 0).rgb;

    // test data alignment
    // if (Params.ppg_train_on == 1) {
    //     uint rc_index = 0;
    //     uint j = 0;
    // 
    //     RCBuffer.data[rc_index].num = 10;
    //     RCBuffer.data[rc_index].record[j].p = vec4(1,2,3,4);
    //     RCBuffer.data[rc_index].record[j].d = vec4(11,22,33,44);
    // 
    //     rc_index = 11;
    //     j = 2;
    //     RCBuffer.data[rc_index].num = 10;
    //     RCBuffer.data[rc_index].record[j].p = vec4(1,2,3,4);
    //     RCBuffer.data[rc_index].record[j].d = vec4(11,22,33,44);
    // }


    uint spp = Params.accumulate_spp;
    if (spp != 1) {
        finalColor = (finalColor + (spp - 1) * imageLoad(AccumulatedImage, ivec2(gl_LaunchIDEXT.xy)).rgb) / spp;
    }

    imageStore(AccumulatedImage, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0f));
    finalColor = LinearToSrgb(finalColor);///RECORD_NUM);
    imageStore(ResultImage, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor * Params.light_strength, 1.0f));
}